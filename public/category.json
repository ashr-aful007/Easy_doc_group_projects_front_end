[
    {
        "category": "MAIN CONCEPTS",
        "title": "Hello World",
        "first": "The smallest React example looks like this:",
        "secondBlack": "const root = ReactDOM.createRoot(document.getElementById('root'));   root.render(<h1>Hello, world!</h1>);",
        "third": "It displays a heading saying “Hello, world!” on the page.   Try it on CodePen   Click the link above to open an online editor. Feel free to make some changes, and see how they affect the output. Most pages in this guide will have editable examples like this one.",
        "forthHeader": "How to Read This Guide",
        "fifth": "In this guide, we will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.",
        "sixthYellow": "Tip   This guide is designed for people who prefer learning concepts step by step. If you prefer to learn by doing, check out our practical tutorial. You might find this guide and the tutorial complementary to each other.",
        "seventh": "This is the first chapter in a step-by-step guide about main React concepts. You can find a list of all its chapters in the navigation sidebar. If you’re reading this from a mobile device, you can access the navigation by pressing the button in the bottom right corner of your screen",
        "eighth": "Every chapter in this guide builds on the knowledge introduced in earlier chapters. You can learn most of React by reading the “Main Concepts” guide chapters in the order they appear in the sidebar. For example, “Introducing JSX” is the next chapter after this one.",
        "ninethHeader": "Knowledge Level Assumptions",
        "tenth": "React is a JavaScript library, and so we’ll assume you have a basic understanding of the JavaScript language. If you don’t feel very confident, we recommend going through a JavaScript tutorial to check your knowledge level and enable you to follow along this guide without getting lost. It might take you between 30 minutes and an hour, but as a result you won’t have to feel like you’re learning both React and JavaScript at the same time.",
        "eleventhYellow": "Note   This guide occasionally uses some newer JavaScript syntax in the examples. If you haven’t worked with JavaScript in the last few years, these three points should get you most of the way."
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "Introducing JSX",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   Writing Markup with JSX   JavaScript in JSX with Curly Braces   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "Consider this variable declaration:",
        "thirdBlack": "const element = <h1>Hello, world!</h1>;",
        "forth": "This funny tag syntax is neither a string nor HTML.   It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.   JSX produces React “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basics of JSX necessary to get you started.",
        "fifthHeader": "Why JSX?",
        "sixth": "React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.",
        "seventh": "Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both. We will come back to components in a further section, but if you’re not yet comfortable putting markup in JS, this talk might convince you otherwise.",
        "eighth": "React doesn’t require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.   With that out of the way, let’s get started!",
        "ninethHeader": "Embedding Expressions in JSX",
        "tenth": "In the example below, we declare a variable called name and then use it inside JSX by wrapping it in curly braces:",
        "eleventhBlack": "const name = 'Josh Perez';   const element = <h1>Hello{name}</h1>;",
        "twelve": "You can put any valid JavaScript expression inside the curly braces in JSX. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.   In the example below, we embed the result of calling a JavaScript function, formatName(user), into an <h1> element.",
        "thirteenBlack": "function formatName(user) {   return user.firstName + ' ' + user.lastName;   }   const user = {   firstName: 'Harper',   lastName: 'Perez'   };   const element = (   <h1>   Hello, {formatName(user)}!   </h1>   );"
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "Rendering Elements",
        "first": "Elements are the smallest building blocks of React apps.",
        "second": "An element describes what you want to see on the screen:",
        "thirdBlack": "const element = <h1>Hello, world</h1>;",
        "forth": "Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.",
        "fifthYellow": "Nodes   One might confuse elements with a more widely known concept of “components”. We will introduce components in the next section. Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.",
        "sisthHeader": "Rendering an Element into the DOM",
        "seventh": "Let’s say there is a <div> somewhere in your HTML file:",
        "eighthBlack": "<div id='root'></div>",
        "nineth": "We call this a “root” DOM node because everything inside it will be managed by React DOM.   Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.   To render a React element, first pass the DOM element to ReactDOM.createRoot(), then pass the React element to root.render():",
        "tenthBlack": "const root = ReactDOM.createRoot(   document.getElementById('root')   );   const element = <h1>Hello, world</h1>;   root.render(element);",
        "eleventh": "It displays “Hello, world” on the page.",
        "twelveHeader": "Updating the Rendered Element",
        "thirteen": "React elements are immutable. Once you create an element, you can’t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.",
        "fourteenHeader": "With our knowledge so far, the only way to update the UI is to create a new element, and pass it to root.render().   Consider this ticking clock example:",
        "fifteenBlack": "const root = ReactDOM.createRoot(   document.getElementById('root')   );   function tick() {   const element = (   <div>   <h1>Hello, world!</h1>   <h2>It is {new Date().toLocaleTimeString()}.</h2>   </div>   );   root.render(element);   }   setInterval(tick, 1000);",
        "sixteen": "It calls root.render() every second from a setInterval() callback.",
        "seventeenYellow": "Note:   In practice, most React apps only call root.render() once. In the next sections we will learn how such code gets encapsulated into stateful components.   We recommend that you don’t skip topics because they build on each other."
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "Components and Props",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   Your First Component   Passing Props to a Component   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.",
        "third": "Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.",
        "forthHeader": "Function and Class Components",
        "fifth": "The simplest way to define a component is to write a JavaScript function:",
        "sixthBlack": "function Welcome(props) {   return <h1>Hello, {props.name}</h1>;   }",
        "seventh": "This function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions.",
        "eighth": "You can also use an ES6 class to define a component:",
        "ninethBlack": "class Welcome extends React.Component {   render() {   return <h1>Hello, {this.props.name}</h1>;   }   }",
        "tenth": "The above two components are equivalent from React’s point of view.",
        "eleventh": "Function and Class components both have some additional features that we will discuss in the next sections.",
        "twelveHeader": "Rendering a Component",
        "thirteen": "Previously, we only encountered React elements that represent DOM tags:",
        "fourteenBlack": "const element = <div />;",
        "fifteen": "However, elements can also represent user-defined components:",
        "sixteenBlack": "const element = <Welcome name='Sara' />;",
        "seventeen": "When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.   For example, this code renders “Hello, Sara” on the page:",
        "eighteenBlack": "function Welcome(props) {   return <h1>Hello, {props.name}</h1>;   }   const root = ReactDOM.createRoot(document.getElementById('root'));   const element = <Welcome name='Sara' />;   root.render(element);"
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "State and Lifecycle",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   State: A Component’s Memory   Synchronizing with Effects   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "This page introduces the concept of state and lifecycle in a React component. You can find a detailed component API reference here.",
        "third": "Consider the ticking clock example from one of the previous sections. In Rendering Elements, we have only learned one way to update the UI. We call root.render() to change the rendered output:",
        "forthBlack": "const root = ReactDOM.createRoot(document.getElementById('root'));   function tick() {   const element = (   <div>   <h1>Hello, world!</h1>   <h2>It is {new Date().toLocaleTimeString()}.</h2>   </div>   );   root.render(element);   }   setInterval(tick, 1000);",
        "fifth": "Try it on CodePen",
        "sixth": "In this section, we will learn how to make the Clock component truly reusable and encapsulated. It will set up its own timer and update itself every second.   We can start by encapsulating how the clock looks:",
        "seventhBlack": "const root = ReactDOM.createRoot(document.getElementById('root'));   function Clock(props) {   return (   <div>   <h1>Hello, world!</h1>   <h2>It is {props.date.toLocaleTimeString()}.</h2>   </div>   );   }   function tick() {   root.render(<Clock date={new Date()} />);   }   setInterval(tick, 1000);",
        "eighth": "Try it on CodePen",
        "nineth": "However, it misses a crucial requirement: the fact that the Clock sets up a timer and updates the UI every second should be an implementation detail of the Clock.   Ideally we want to write this once and have the Clock update itself:",
        "tenthBlack": "root.render(<Clock />);",
        "eleventh": "To implement this, we need to add “state” to the Clock component.   State is similar to props, but it is private and fully controlled by the component.",
        "twelveHeader": "Converting a Function to a Class",
        "thirteen": "You can convert a function component like Clock to a class in five steps:",
        "fourteenNumber": "Create an ES6 class, with the same name, that extends React.Component.   Add a single empty method to it called render().   Move the body of the function into the render() method.   Replace props with this.props in the render() body.   Delete the remaining empty function declaration.",
        "fifteenBlack": "class Clock extends React.Component {   render() {   return (   <div>   <h1>Hello, world!</h1>   <h2>It is {this.props.date.toLocaleTimeString()}.</h2>   </div>   );   }   }",
        "sixteen": "Try it on CodePen",
        "seventeen": "Clock is now defined as a class rather than a function.",
        "eighteen": "The render method will be called each time an update happens, but as long as we render <Clock /> into the same DOM node, only a single instance of the Clock class will be used. This lets us use additional features such as local state and lifecycle methods."
    },
    {
        "category":"MAIN CONCEPTS",
        "title": "Handling Events",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   Responding to Events   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:",
        "thirdBullet": "React events are named using camelCase, rather than lowercase.   With JSX you pass a function as the event handler, rather than a string.",
        "forth": "For example, the HTML:",
        "fifthBlack": "<button onclick='activateLasers()'>   Activate Lasers   </button>",
        "sixth": "is slightly different in React:",
        "seventhBlack": "<button onClick={activateLasers}>   Activate Lasers   </button>",
        "eighth": "Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default form behavior of submitting, you can write:",
        "ninethBlack": "<form onsubmit='console.log('You clicked submit.'); return false'>   <button type='submit'>Submit</button>   </form>",
        "tenth": "In React, this could instead be:",
        "eleventhBlack": "function Form() {   function handleSubmit(e) {   e.preventDefault();   console.log('You clicked submit.');   }   return (   <form onSubmit={handleSubmit}>   <button type='submit'>Submit</button>   </form>   );   }",
        "twelve": "Here, e is a synthetic event. React defines these synthetic events according to the W3C spec, so you don’t need to worry about cross-browser compatibility. React events do not work exactly the same as native events. See the SyntheticEvent reference guide to learn more.",
        "thirteen": "When using React, you generally don’t need to call addEventListener to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.",
        "fourteen": "When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class. For example, this Toggle component renders a button that lets the user toggle between “ON” and “OFF” states:",
        "fifteenBlack": "class Toggle extends React.Component {   constructor(props) {   super(props);   this.state = {isToggleOn: true};   // This binding is necessary to make `this` work in the callback   this.handleClick = this.handleClick.bind(this);   }   handleClick() {   this.setState(prevState => ({   isToggleOn: !prevState.isToggleOn   }));   }   render() {   return (   <button onClick={this.handleClick}>   {this.state.isToggleOn ? 'ON' : 'OFF'}   </button>   );   }   }",
        "sixteen": "Try it on CodePen",
        "seventeen": "You have to be careful about the meaning of this in JSX callbacks. In JavaScript, class methods are not bound by default. If you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.",
        "eighteen": "This is not React-specific behavior; it is a part of how functions work in JavaScript. Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.",
        "nineteen": "If calling bind annoys you, there are two ways you can get around this. You can use public class fields syntax to correctly bind callbacks:",
        "twentyBlack": "class LoggingButton extends React.Component {   // This syntax ensures `this` is bound within handleClick.   handleClick = () => {   console.log('this is:', this);   };   render() {   return (   <button onClick={this.handleClick}>   Click me   </button>   );   }   }",
        "twentyOne": "This syntax is enabled by default in Create React App.",
        "twentyTwo": "f you aren’t using class fields syntax, you can use an arrow function in the callback:"
    },
    {
        "category":"MAIN CONCEPTS",
        "title": "Conditional Rendering",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   Conditional Rendering   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.",
        "third": "Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.",
        "forth": "Consider these two components:",
        "fifthBlack": "function UserGreeting(props) {   return <h1>Welcome back!</h1>;   }   function GuestGreeting(props) {   return <h1>Please sign up.</h1>;   }",
        "sixth": "We’ll create a Greeting component that displays either of these components depending on whether a user is logged in:",
        "seventhBlack": "function Greeting(props) {   const isLoggedIn = props.isLoggedIn;   if (isLoggedIn) {   return <UserGreeting />;   }   return <GuestGreeting />;   }   const root = ReactDOM.createRoot(document.getElementById('root'));   // Try changing to isLoggedIn={true}:   root.render(<Greeting isLoggedIn={false} />);",
        "eighth": "Try it on CodePen",
        "nineth": "This example renders a different greeting depending on the value of isLoggedIn prop.",
        "tenthHeader": "Element Variables",
        "eleventh": "You can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn’t change.",
        "twelve": "Consider these two new components representing Logout and Login buttons:",
        "thirteenBlack": "function LoginButton(props) {   return (   <button onClick={props.onClick}>   Login   </button>   );   }   function LogoutButton(props) {   return (   <button onClick={props.onClick}>   Logout   </button>   );   }",
        "fourteen": "In the example below, we will create a stateful component called LoginControl.",
        "fifteen": "It will render either <LoginButton /> or <LogoutButton /> depending on its current state. It will also render a <Greeting /> from the previous example:",
        "sixteenBlack": "class LoginControl extends React.Component {   constructor(props) {   super(props);   this.handleLoginClick = this.handleLoginClick.bind(this);   this.handleLogoutClick = this.handleLogoutClick.bind(this);   this.state = {isLoggedIn: false};   }   handleLoginClick() {   this.setState({isLoggedIn: true});   }   handleLogoutClick() {   this.setState({isLoggedIn: false});   }   render() {   const isLoggedIn = this.state.isLoggedIn;   let button;   if (isLoggedIn) {   button = <LogoutButton onClick={this.handleLogoutClick} />;   } else {   button = <LoginButton onClick={this.handleLoginClick} />;   }   return (   <div>   <Greeting isLoggedIn={isLoggedIn} />   {button}   </div>   );   }   }   const root = ReactDOM.createRoot(document.getElementById('root'));   root.render(<LoginControl />);",
        "seventeen": "Try it on CodePen",
        "eighteen": "While declaring a variable and using an if statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below."
    },
    {
        "category":"MAIN CONCEPTS",
        "title": "Lists and Keys",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   Rendering Lists   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "First, let’s review how you transform lists in JavaScript.",
        "third": "Given the code below, we use the map() function to take an array of numbers and double their values. We assign the new array returned by map() to the variable doubled and log it:",
        "forthBlack": "const numbers = [1, 2, 3, 4, 5];   const doubled = numbers.map((number) => number * 2);   console.log(doubled);",
        "fifth": "This code logs [2, 4, 6, 8, 10] to the console.",
        "sixth": "In React, transforming arrays into lists of elements is nearly identical.",
        "seventhHeader": "Rendering Multiple Components",
        "eighth": "You can build collections of elements and include them in JSX using curly braces {}.",
        "nineth": "Below, we loop through the numbers array using the JavaScript map() function. We return a <li> element for each item. Finally, we assign the resulting array of elements to listItems:",
        "tenthBlack": "const numbers = [1, 2, 3, 4, 5];   const listItems = numbers.map((number) =>   <li>{number}</li>   );",
        "eleventh": "Then, we can include the entire listItems array inside a <ul> element:",
        "twelveBlack": "<ul>{listItems}</ul>",
        "thirteen": "Try it on CodePen   This code displays a bullet list of numbers between 1 and 5.",
        "fourteenHeader": "Basic List Component",
        "fifteen": "Usually you would render lists inside a component.",
        "sixteen": "We can refactor the previous example into a component that accepts an array of numbers and outputs a list of elements.",
        "seventhBlack": "function NumberList(props) {   const numbers = props.numbers;   const listItems = numbers.map((number) =>   <li>{number}</li>   );   return (   <ul>{listItems}</ul>   );   }   const numbers = [1, 2, 3, 4, 5];   const root = ReactDOM.createRoot(document.getElementById('root'));   root.render(<NumberList numbers={numbers} />);",
        "eighteen": "When you run this code, you’ll be given a warning that a key should be provided for list items. A “key” is a special string attribute you need to include when creating lists of elements. We’ll discuss why it’s important in the next section.",
        "nineteen": "Let’s assign a key to our list items inside numbers.map() and fix the missing key issue.",
        "twentyBlack": "function NumberList(props) {   const numbers = props.numbers;   const listItems = numbers.map((number) =>   <li key={number.toString()}>   {number}   </li>   );   return (   <ul>{listItems}</ul>   );   }"
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "Forms",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   <input>   <select>   <textarea>   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:",
        "thirdBlack": "<form>   <label>   Name:   <input type='text' name='name' />   </label>   <input type='submit' value='Submit' />   </form>",
        "forth": "This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called “controlled components”.",
        "fifthHeader": "Controlled Components",
        "sixth": "In HTML, form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with setState().",
        "seventh": "We can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.",
        "eighth": "For example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:",
        "ninethBlack": "class NameForm extends React.Component {   constructor(props) {   super(props);   this.state = {value: ''};   this.handleChange = this.handleChange.bind(this);   this.handleSubmit = this.handleSubmit.bind(this);   }   handleChange(event) {   this.setState({value: event.target.value});   }   handleSubmit(event) {   alert('A name was submitted: ' + this.state.value);   event.preventDefault();   }   render() {   return (   <form onSubmit={this.handleSubmit}>   <label>   Name:   <input type='text' value={this.state.value} onChange={this.handleChange} />   </label>   <input type='submit' value='Submit' />   </form>   );   }   }",
        "tenth": "Try it on CodePen",
        "eleventh": "Since the value attribute is set on our form element, the displayed value will always be this.state.value, making the React state the source of truth. Since handleChange runs on every keystroke to update the React state, the displayed value will update as the user types.",
        "twelve": "With a controlled component, the input’s value is always driven by the React state. While this means you have to type a bit more code, you can now pass the value to other UI elements too, or reset it from other event handlers.",
        "thirteen": "The textarea Tag",
        "fourteen": "In HTML, a <textarea> element defines its text by its children:",
        "fifteenBlack": "<textarea>   Hello there, this is some text in a text area   </textarea>",
        "sixteen": "In React, a <textarea> uses a value attribute instead. This way, a form using a <textarea> can be written very similarly to a form that uses a single-line input:",
        "seventeenBlack": "class EssayForm extends React.Component {   constructor(props) {   super(props);   this.state = {   value: 'Please write an essay about your favorite DOM element.'   };   this.handleChange = this.handleChange.bind(this);   this.handleSubmit = this.handleSubmit.bind(this);   }   handleChange(event) {   this.setState({value: event.target.value});   }   handleSubmit(event) {   alert('An essay was submitted: ' + this.state.value);   event.preventDefault();   }   render() {   return (   <form onSubmit={this.handleSubmit}>   <label>   Essay:   <textarea value={this.state.value} onChange={this.handleChange} />   </label>   <input type='submit' value='Submit' />   </form>   );   }   }",
        "eighteen": "Notice that this.state.value is initialized in the constructor, so that the text area starts off with some text in it."
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "Lifting State Up",
        "firstYellow": "Try the new React documentation.   These new documentation pages teach modern React and include live examples:   Sharing State Between Components   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor. Let’s see how this works in action.",
        "third": "In this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.",
        "forth": "We will start with a component called BoilingVerdict. It accepts the celsius temperature as a prop, and prints whether it is enough to boil the water:",
        "fifthBlack": "function BoilingVerdict(props) {   if (props.celsius >= 100) {   return <p>The water would boil.</p>;   }   return <p>The water would not boil.</p>;   }",
        "sixth": "Next, we will create a component called Calculator. It renders an <input> that lets you enter the temperature, and keeps its value in this.state.temperature.",
        "seventh": "Additionally, it renders the BoilingVerdict for the current input value.",
        "eighthBlack": "class Calculator extends React.Component {   constructor(props) {   super(props);   this.handleChange = this.handleChange.bind(this);   this.state = {temperature: ''};   }   handleChange(e) {   this.setState({temperature: e.target.value});   }   render() {   const temperature = this.state.temperature;   return (   <fieldset>   <legend>Enter temperature in Celsius:</legend>   <input   value={temperature}   onChange={this.handleChange} />   <BoilingVerdict   celsius={parseFloat(temperature)} />   </fieldset>   );   }   }",
        "nineth": "Try it on CodePen",
        "tenthHeader": "Adding a Second Input",
        "eleventh": "Our new requirement is that, in addition to a Celsius input, we provide a Fahrenheit input, and they are kept in sync.",
        "twelve": "We can start by extracting a TemperatureInput component from Calculator. We will add a new scale prop to it that can either be 'c' or 'f':",
        "thirteenBlack": "const scaleNames = {   c: 'Celsius',   f: 'Fahrenheit'   };   class TemperatureInput extends React.Component {   constructor(props) {   super(props);   this.handleChange = this.handleChange.bind(this);   this.state = {temperature: ''};   }   handleChange(e) {   this.setState({temperature: e.target.value});   }   render() {   const temperature = this.state.temperature;   const scale = this.props.scale;   return (   <fieldset>   <legend>Enter temperature in {scaleNames[scale]}:</legend>   <input value={temperature}   onChange={this.handleChange} />   </fieldset>   );   }  }",
        "fourteen": "We can now change the Calculator to render two separate temperature inputs:",
        "fifteenBlack": "class Calculator extends React.Component {   render() {   return (   <div>   <TemperatureInput scale='c' />   <TemperatureInput scale='f' />   </div>   );   }   }",
        "sixteen": "Try it on CodePen",
        "seventeen": "We have two inputs now, but when you enter the temperature in one of them, the other doesn’t update. This contradicts our requirement: we want to keep them in sync.",
        "eighteen": "We also can’t display the BoilingVerdict from Calculator. The Calculator doesn’t know the current temperature because it is hidden inside the TemperatureInput.",
        "nineteen": "Lifting State Up",
        "twenty": "Currently, both TemperatureInput components independently keep their values in the local state:",
        "twentyOneBlack": "class TemperatureInput extends React.Component {   constructor(props) {   super(props);   this.handleChange = this.handleChange.bind(this);   this.state = {temperature: ''};   }   handleChange(e) {   this.setState({temperature: e.target.value});   }   render() {   const temperature = this.state.temperature;   // ...",
        "twentyTwo": "However, we want these two inputs to be in sync with each other. When we update the Celsius input, the Fahrenheit input should reflect the converted temperature, and vice versa.",
        "twentyThree": "In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called “lifting state up”. We will remove the local state from the TemperatureInput and move it into the Calculator instead.",
        "twentyFour": "If the Calculator owns the shared state, it becomes the “source of truth” for the current temperature in both inputs. It can instruct them both to have values that are consistent with each other. Since the props of both TemperatureInput components are coming from the same parent Calculator component, the two inputs will always be in sync."
    },
    {
        "category":"MAIN CONCEPTS",
        "title": "Composition vs Inheritance",
        "first": "React has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.",
        "second": "In this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.",
        "thirdHeader": "Containment",
        "forth": "Some components don’t know their children ahead of time. This is especially common for components like Sidebar or Dialog that represent generic “boxes”.",
        "fifth": "We recommend that such components use the special children prop to pass children elements directly into their output:",
        "sixthBlack": "function FancyBorder(props) {   return (   <div className={'FancyBorder FancyBorder-' + props.color}>   {props.children}   </div>   );   }",
        "seventh": "This lets other components pass arbitrary children to them by nesting the JSX:",
        "eighthBlack": "function WelcomeDialog() {   return (   <FancyBorder color='blue'>   <h1 className='Dialog-title'>   Welcome   </h1>   <p className='Dialog-message'>   Thank you for visiting our spacecraft!   </p>   </FancyBorder>   );   }",
        "nineth": "Try it on CodePen",
        "tenth": "Anything inside the <FancyBorder> JSX tag gets passed into the FancyBorder component as a children prop. Since FancyBorder renders {props.children} inside a <div>, the passed elements appear in the final output.",
        "eleventh": "While this is less common, sometimes you might need multiple “holes” in a component. In such cases you may come up with your own convention instead of using children:",
        "twelveBlack": "function SplitPane(props) {   return (   <div className='SplitPane'>   <div className='SplitPane-left'>   {props.left}   </div>   <div className='SplitPane-right'>   {props.right}   </div>   </div>   );   }   function App() {   return (   <SplitPane   left={   <Contacts />   }   right={   <Chat />   } />   );   }",
        "thirteen": "Try it on CodePen",
        "fourteen": "React elements like <Contacts /> and <Chat /> are just objects, so you can pass them as props like any other data. This approach may remind you of “slots” in other libraries but there are no limitations on what you can pass as props in React.",
        "fifteen": "Specialization",
        "sixteen": "Sometimes we think about components as being “special cases” of other components. For example, we might say that a WelcomeDialog is a special case of Dialog.",
        "seventeen": "In React, this is also achieved by composition, where a more “specific” component renders a more “generic” one and configures it with props:",
        "eighteenBlack": "function Dialog(props) {   return (   <FancyBorder color='blue'>   <h1 className='Dialog-title'>   {props.title}   </h1>   <p className='Dialog-message'>   {props.message}   </p>   </FancyBorder>   );   }   function WelcomeDialog() {   return (   <Dialog   title='Welcome'   message='Thank you for visiting our spacecraft!' />   );   }",
        "nineteen": "Try it on CodePen",
        "twenty": "Composition works equally well for components defined as classes:",
        "twentyOneBlack": "function Dialog(props) {   return (   <FancyBorder color='blue'>   <h1 className='Dialog-title'>   {props.title}   </h1>   <p className='Dialog-message'>   {props.message}   </p>   {props.children}   </FancyBorder>   );   }   class SignUpDialog extends React.Component {   constructor(props) {   super(props);   this.handleChange = this.handleChange.bind(this);   this.handleSignUp = this.handleSignUp.bind(this);   this.state = {login: ''};   }   render() {   return (   <Dialog title='Mars Exploration Program'   message='How should we refer to you?'>   <input value={this.state.login}   onChange={this.handleChange} />   <button onClick={this.handleSignUp}>   Sign Me Up!   </button>   </Dialog>   );   }   handleChange(e) {   this.setState({login: e.target.value});   }   handleSignUp() {   alert(`Welcome aboard, ${this.state.login}!`);   }   }",
        "twentyTwoHeader": "So What About Inheritance?",
        "twentyThree": "At Facebook, we use React in thousands of components, and we haven’t found any use cases where we would recommend creating component inheritance hierarchies.",
        "twentyFour": "Props and composition give you all the flexibility you need to customize a component’s look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.",
        "twentyFive": "If you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or class, without extending it."
    },
    {
        "category": "MAIN CONCEPTS",
        "title": "Thinking in React",
        "firstYellow": "Try the new React documentation.   The updated Thinking in React guide teaches modern React and includes live examples.   The new docs will soon replace this site, which will be archived. Provide feedback.",
        "second": "React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.",
        "third": "One of the many great parts of React is how it makes you think about apps as you build them. In this document, we’ll walk you through the thought process of building a searchable product data table using React.",
        "forthHeader": "Start With A Mock",
        "fifth": "Imagine that we already have a JSON API and a mock from our designer. The mock looks like this:",
        "sixthImg": "https://reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png",
        "seventh": "Our JSON API returns some data that looks like this:",
        "eighthBlack": "[   {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},   {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},   {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},   {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},   {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},   {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}   ];",
        "ninethHeader": "Step 1: Break The UI Into A Component Hierarchy",
        "tenth": "The first thing you’ll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names. If you’re working with a designer, they may have already done this, so go talk to them! Their Photoshop layer names may end up being the names of your React components!",
        "eleventh": "But how do you know what should be its own component? Use the same techniques for deciding if you should create a new function or object. One such technique is the single responsibility principle, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.",
        "twelve": "Since you’re often displaying a JSON data model to a user, you’ll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely. That’s because UI and data models tend to adhere to the same information architecture. Separate your UI into components, where each component matches one piece of your data model.",
        "thirteenImgTwo": "https://reactjs.org/static/9381f09e609723a8bb6e4ba1a7713b46/90cbd/thinking-in-react-components.png",
        "fourteen": "You’ll see here that we have five components in our app. We’ve italicized the data each component represents. The numbers in the image correspond to the numbers below.",
        "fifteenNumber": "FilterableProductTable (orange): contains the entirety of the example   SearchBar (blue): receives all user input   ProductTable (green): displays and filters the data collection based on user input   ProductCategoryRow (turquoise): displays a heading for each category   ProductRow (red): displays a row for each product",
        "sixteen": "If you look at ProductTable, you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and there’s an argument to be made either way. For this example, we left it as part of ProductTable because it is part of rendering the data collection which is ProductTable’s responsibility. However, if this header grows to be complex (e.g., if we were to add affordances for sorting), it would certainly make sense to make this its own ProductTableHeader component."
    }
]